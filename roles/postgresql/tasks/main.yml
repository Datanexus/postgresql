# (c) Copyright 2016 DataNexus Inc.  All Rights Reserved.
#
#
---    
# facts configuration.
- import_tasks: facts.yml
- import_tasks: interface-facts.yml

# Amazon linux is based on Redhat 6
- block:
  
  - set_fact:
      vendor_distribution: centos

  - name: POSTGRESQL OVERLAY | enabling epel repo for Amazon
    command: /usr/bin/yum-config-manager --enable epel

  - name: POSTGRESQL OVERLAY | installing {{ application }} repo for Amazon
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - 'https://download.postgresql.org/pub/repos/yum/{{ postgresql_major_version }}.{{ postgresql_minor_version }}/redhat/rhel-6-x86_64/pgdg-ami201503-{{ postgresql_major_version }}{{ postgresql_minor_version }}-{{ postgresql_major_version }}.{{ postgresql_minor_version }}-2.noarch.rpm'

  become: yes
  when: ansible_distribution == 'Amazon'

# CentOS / Redhat 7
- block:
  
  - name: POSTGRESQL OVERLAY | installing epel repo for CentOS / Redhat
    package:
      name: epel-release-7-9
      state: present

  - name: POSTGRESQL OVERLAY | installing {{ application }} repo for CentOS / Redhat
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - 'https://download.postgresql.org/pub/repos/yum/{{ postgresql_major_version }}.{{ postgresql_minor_version }}/redhat/rhel-7-x86_64/pgdg-{{ vendor_distribution  | default(ansible_distribution|lower) }}{{ postgresql_major_version }}{{ postgresql_minor_version }}-{{ postgresql_major_version }}.{{ postgresql_minor_version }}-3.noarch.rpm'
  
  become: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

- name: POSTGRESQL OVERLAY | installing {{ application }} packages
  package:
    name: "{{ item }}"
    state: present
  with_items:
    # - "python-psycopg2-{{ python_postgres_adapter_version }}.rhel7"
    # - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-{{ postgresql_version }}{{ postgresql_rpm_info }}"
 #    - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-server-{{ postgresql_version }}{{ postgresql_rpm_info }}"
 #    - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-contrib-{{ postgresql_version }}{{ postgresql_rpm_info }}"
 #    - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-libs-{{ postgresql_version }}{{ postgresql_rpm_info }}"
    - python-psycopg2
    - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}"
    - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-server"
    - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-contrib"
    - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-libs"
  become: yes

- block:

  - name: POSTGRESQL OVERLAY | creating default PostgreSQL profile
    template:
      src: postgres.sh.j2
      dest: "{{ postgresql_home_dir }}/.pgsql_profile"
      owner: "{{ postgresql_user }}"
      group: "{{ postgresql_user }}"
      mode: 0644
      
  - name: POSTGRESQL OVERLAY | applying postgresql customizations on Redhat 6 base
    lineinfile:
      backrefs: yes
      path: "/etc/rc.d/init.d/postgresql-{{ postgresql_major_version }}.{{ postgresql_minor_version }}"
      regexp: '^PGDATA=/var/lib/pgsql/9.6/data'
      line: "PGDATA={{ postgresql_data_dir }}"
    when: ansible_distribution == 'Amazon'

  - name: POSTGRESQL OVERLAY | applying postgresql customizations on Redhat 7 base
    blockinfile:
      name: "/etc/systemd/system/postgresql-{{ postgresql_major_version }}.{{ postgresql_minor_version }}.service"
      mode: 0644
      create: yes
      block: |
        .include /lib/systemd/system/postgresql-{{ postgresql_major_version }}.{{ postgresql_minor_version }}.service
        [Service]
        Environment=PGDATA={{ postgresql_data_dir }}
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
    
  - name: POSTGRESQL OVERLAY | checking if {{ application }} database is initialized
    stat:
      path: "{{ postgresql_data_dir }}/PG_VERSION"
    register: pgdata_dir_version

  - block:
    
    - file:
        state: directory
        mode: 0755
        path: "{{ postgresql_data_dir }}"
        owner: "{{ postgresql_user }}"
        group: "{{ postgresql_group }}"
    
    - name: POSTGRESQL OVERLAY | initializing {{ postgresql_data_dir }} on Amazon
      command: "{{ postgresql_bin_path }}/initdb {{ postgresql_data_dir}}"
      become_user: "{{ postgresql_user }}"
      
    when:
      - not pgdata_dir_version.stat.exists
      - ansible_distribution == 'Amazon'
      
  - name: POSTGRESQL OVERLAY | initializing {{ postgresql_data_dir }} on CentOS / RHEL
    command: "{{ postgresql_bin_path }}/postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-setup initdb"
    when:
      - not pgdata_dir_version.stat.exists
      - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: POSTGRESQL OVERLAY | listening on {{ postgresql_interface_ipv4 }}
    lineinfile:
      dest: "{{ postgresql_config_path }}/postgresql.conf"
      regexp: "^#?listen_addresses"
      backrefs: yes
      line: "listen_addresses = '{{ item }}'\t# what IP address(es) to listen on;"
    with_items: "{{ postgresql_interface_ipv4 }}"
 
  - name: POSTGRESQL OVERLAY | configuring global settings
    lineinfile:
      dest: "{{ postgresql_config_path }}/postgresql.conf"
      regexp: "^#?{{ item.option }}.+$"
      line: "{{ item.option }} = '{{ item.value }}'"
      state: "{{ item.state | default('present') }}"
    with_items: "{{ postgresql_global_config_options }}"
  
  - name: POSTGRESQL OVERLAY | ensuring {{ application }} unix socket dirs exist
    file:
      path: "{{ item }}"
      state: directory
      owner: "{{ postgresql_user }}"
      group: "{{ postgresql_group }}"
      mode: 02775
    with_items: "{{ postgresql_unix_socket_directories }}"
  
  - name: POSTGRESQL OVERLAY | ensuring SE Linux pre-requisite packages are installed
    package:
      name: "{{ item }}"
      state: present
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
    with_items:
      - policycoreutils-python
      
  - name: POSTGRESQL OVERLAY | updating SE Linux enforcing mode
    sefcontext:
      target: "{{ postgresql_data_dir }}(/.*)?"
      setype: postgresql_db_t
      state: present
      reload: true
    when: ansible_selinux.status == "enabled"
      
  # sefcontent does not restore the context, so we need another step       
  - name: POSTGRESQL OVERLAY | restoring SE Linux security context
    command: /sbin/restorecon -R {{ postgresql_data_dir }}
    when: ansible_selinux.status == "enabled"
  
  - name: POSTGRESQL OVERLAY | setting listener to trust the data subnet
    lineinfile:
     dest: "{{ postgresql_config_path }}/pg_hba.conf"
     insertafter: "^host    all             all             127.0.0.1/32            ident"
     line: "host    all             {{ postgresql_user }}        {{ postgresql_broadcast_interface_ipv4 }}/24          trust"
       
  - name: POSTGRESQL OVERLAY | ensuring {{ application }} is started and enabled on boot on Amazon
    service: "name={{ postgresql_daemon }} state=started enabled=True"
    when: ansible_distribution == 'Amazon'
  
  - name: POSTGRESQL OVERLAY | ensuring {{ application }} is started and enabled on boot on CentOS / RHEL
    systemd: "name={{ postgresql_daemon }} state=started enabled=True"
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
    
  become: yes
