# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# Launch an Azure AMI
---
- name: POSTGRESQL OVERLAY | creating ssh security group
  azure_rm_securitygroup:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "dnsg_{{ project }}_ssh_private_internal"
    purge_rules: yes
    rules:
      - name: DenyAll
        protocol: '*'
        source_address_prefix: '*'
        source_port_range: '*'
        destination_address_prefix: '*'
        destination_port_range: '*'
        access: Deny
        priority: 200
        direction: Inbound
      - name: AllowSSH
        protocol: Tcp
        source_address_prefix: "{{ internal_private_subnet_result.properties.addressPrefix }}"
        destination_port_range: 22
        access: Allow
        priority: 100
        direction: Inbound
  register: sg_ssh_private

- name: POSTGRESQL OVERLAY | creating postgresql security group
  azure_rm_securitygroup:
    resource_group: "{{ specified_resourcegroup.name }}"
    name: "dnsg_{{ project }}_{{ application }}_public_internal"
    purge_rules: yes
    rules:
      - name: DenyAll
        protocol: '*'
        source_address_prefix: '*'
        source_port_range: '*'
        destination_address_prefix: '*'
        destination_port_range: '*'
        access: Deny
        priority: 200
        direction: Inbound
      - name: AllowPG
        protocol: Tcp
        source_address_prefix: "{{ internal_public_subnet_result.properties.addressPrefix }}"
        source_port_range: '*'
        destination_address_prefix: "{{ internal_public_subnet_result.properties.addressPrefix }}"
        destination_port_range: 5432
        access: Allow
        priority: 101
        direction: Inbound
  register: sg_postgresql

- name: POSTGRESQL OVERLAY | setting key path to {{ key_path }}
  set_fact: key_path="{{ ansible_env.PWD }}"
  when: key_path is not defined

- name: POSTGRESQL OVERLAY | checking {{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem
  stat: path="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem"
  register: existing_key

# create new SSH key - azure supports 2048bit+ RSA 
- block:    
  - name: POSTGRESQL OVERLAY | creating {{ cloud }}-{{ region }}-{{ project }}-{{ application }}
    command: "/usr/bin/ssh-keygen -b 2048 -t rsa -f {{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem -N ''"
    register: new_azure_keypair

  - name: setting read-only permissions on key {{ cloud }}-{{ region }}-{{ project }}-{{ application }}
    file:
      path: "{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem.pub"
      mode: 0400
    when:
      - new_azure_keypair.changed
  when:
    - not existing_key.stat.exists

- set_fact:
    key_contents: "{{ lookup('file', item) }}"
  with_items:
    - "{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem.pub"

# the math is overkill, but it's useful if we want to get more complicated
- name: POSTGRESQL OVERLAY | setting count to {{ count }}
  set_fact:
    count: "{{ instances | default(1) | int * 1  }}"
    
- block:
  - name: POSTGRESQL OVERLAY | creating {{ count }} {{ application }} virtual {{ project }}_{{ application }}_internal NIC
    azure_rm_networkinterface:
      resource_group: "{{ specified_resourcegroup.name }}"
      name: "{{ project }}_{{ application }}_{{ item }}_internal"    
      virtual_network: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.name }}"
      subnet_name: "{{ internal_private_subnet_result.name }}"
      security_group: "dnsg_{{ project }}_ssh_private_internal"
      ip_configurations:
        - name: ipconfig1
          primary: yes
      tags:
        Application: "{{ application }}"  
        Role: "{{ role | default ('none') }}"
        Tenant: "{{ tenant }}"
        Project: "{{ project }}"
        Cloud: "{{ cloud }}"
        Domain: "{{ domain }}"
        Cluster: "{{ cluster | default ('a') }}"
        Dataflow: "{{ dataflow | default ('none') }}"
    with_sequence: count={{ count }}
    
  - name: POSTGRESQL OVERLAY | creating {{ count }} {{ application }} virtual {{ project }}_{{ application }}_external NIC
    azure_rm_networkinterface:
      resource_group: "{{ specified_resourcegroup.name }}"
      name: "{{ project }}_{{ application }}_{{ item }}_external"
      virtual_network: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.name }}"
      subnet_name: '{{ internal_public_subnet_result.name }}'
      security_group: "dnsg_{{ project }}_{{ application }}_public_internal"
      ip_configurations:
        - name: ipconfig1
          primary: yes
      tags:
        Application: "{{ application }}"  
        Role: "{{ role | default ('none') }}"
        Tenant: "{{ tenant }}"
        Project: "{{ project }}"
        Cloud: "{{ cloud }}"
        Domain: "{{ domain }}"
        Cluster: "{{ cluster | default ('a') }}"
        Dataflow: "{{ dataflow | default ('none') }}"
    with_sequence: count={{ count }}
  
  - name: POSTGRESQL OVERLAY | creating {{ count }} {{ application }} VM in {{ specified_resourcegroup.name }}
    azure_rm_virtualmachine:
      resource_group: "{{ specified_resourcegroup.name }}"
      name: "{{ project }}-{{ application }}-{{ item }}"
      location: "{{ region }}"
      network_interface_names:
        - "{{ project }}_{{ application }}_{{ item }}_internal"
        - "{{ project }}_{{ application }}_{{ item }}_external"
      vm_size: "{{ type }}"
      managed_disk_type: "{{ root_disk_type | default('Standard_LRS') }}"
      admin_username: "{{ user }}"
      ssh_password_enabled: False
      ssh_public_keys:
        - path: "/home/{{ user }}/.ssh/authorized_keys"
          key_data: "{{ key_contents }}"
      image: "{{ image }}"
      data_disks:
        - lun: 0
          disk_size_gb: "{{ data_volume | default(64) }}"
          managed_disk_type: "{{ data_disk_type | default('Standard_LRS') }}"
      tags:
        Application: "{{ application }}"
        Role: "{{ role | default ('none') }}"
        Tenant: "{{ tenant }}"
        Project: "{{ project }}"
        Cloud: "{{ cloud }}"
        Domain: "{{ domain }}"
        Cluster: "{{ cluster | default ('a') }}"
        Dataflow: "{{ dataflow | default ('none') }}"
    with_sequence: count={{ count }}
    register: create_vm_log

  when: not replica
  
- block:
  - name: POSTGRESQL OVERLAY | creating {{ count }} {{ application }} master virtual {{ project }}_{{ application }}_internal NIC
    azure_rm_networkinterface:
      resource_group: "{{ specified_resourcegroup.name }}"
      name: "{{ project }}_{{ application }}_{{ ec2_tag_Role | default('master') }}_{{ cluster | default('a') }}_{{ dataflow | default('none') }}_{{ item }}_master_internal"
      virtual_network: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.name }}"
      subnet_name: "{{ internal_private_subnet_result.name }}"
      security_group: "dnsg_{{ project }}_ssh_private_internal"
      ip_configurations:
        - name: ipconfig1
          primary: yes
      tags:
        Application: "{{ application }}"
        Role: master
        Tenant: "{{ tenant }}"
        Project: "{{ project }}"
        Cloud: "{{ cloud }}"
        Domain: "{{ domain }}"
        Cluster: "{{ cluster | default ('a') }}"
        Dataflow: "{{ dataflow | default ('none') }}"
    with_sequence: count={{ count }}
    
  - name: POSTGRESQL OVERLAY | creating {{ count }} {{ application }} master virtual {{ project }}_{{ application }}_external NIC
    azure_rm_networkinterface:
      resource_group: "{{ specified_resourcegroup.name }}"
      name: "{{ project }}_{{ application }}_{{ ec2_tag_Role | default('master') }}_{{ cluster | default('a') }}_{{ dataflow | default('none') }}_{{ item }}_master_external"
      virtual_network: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.name }}"
      subnet_name: '{{ internal_public_subnet_result.name }}'
      security_group: "dnsg_{{ project }}_{{ application }}_public_internal"
      ip_configurations:
        - name: ipconfig1
          primary: yes
      tags:
        Application: "{{ application }}"
        Role: master
        Tenant: "{{ tenant }}"
        Project: "{{ project }}"
        Cloud: "{{ cloud }}"
        Domain: "{{ domain }}"
        Cluster: "{{ cluster | default ('a') }}"
        Dataflow: "{{ dataflow | default ('none') }}"
    with_sequence: count={{ count }}
    
  - name: POSTGRESQL OVERLAY | creating {{ count }} {{ application }} replica virtual {{ project }}_{{ application }}_internal NIC
    azure_rm_networkinterface:
      resource_group: "{{ specified_resourcegroup.name }}"
      name: "{{ project }}_{{ application }}_{{ ec2_tag_Role | default('replica') }}_{{ cluster | default('a') }}_{{ dataflow | default('none') }}_{{ item }}_replica_internal"
      virtual_network: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.name }}"
      subnet_name: "{{ internal_private_subnet_result.name }}"
      security_group: "dnsg_{{ project }}_ssh_private_internal"
      ip_configurations:
        - name: ipconfig1
          primary: yes
      tags:
        Application: "{{ application }}"
        Role: replica
        Tenant: "{{ tenant }}"
        Project: "{{ project }}"
        Cloud: "{{ cloud }}"
        Domain: "{{ domain }}"
        Cluster: "{{ cluster | default ('a') }}"
        Dataflow: "{{ dataflow | default ('none') }}"
    with_sequence: count={{ count }}
      
  - name: POSTGRESQL OVERLAY | creating {{ count }} {{ application }} replica virtual {{ project }}_{{ application }}_external NIC
    azure_rm_networkinterface:
      resource_group: "{{ specified_resourcegroup.name }}"
      name: "{{ project }}_{{ application }}_{{ ec2_tag_Role | default('replica') }}_{{ cluster | default('a') }}_{{ dataflow | default('none') }}_{{ item }}_replica_external"
      virtual_network: "{{ virtualnetwork_by_name.ansible_facts.azure_virtualnetworks.0.name }}"
      subnet_name: '{{ internal_public_subnet_result.name }}'
      security_group: "dnsg_{{ project }}_{{ application }}_public_internal"
      ip_configurations:
        - name: ipconfig1
          primary: yes
      tags:
        Application: "{{ application }}"
        Role: replica
        Tenant: "{{ tenant }}"
        Project: "{{ project }}"
        Cloud: "{{ cloud }}"
        Domain: "{{ domain }}"
        Cluster: "{{ cluster | default ('a') }}"
        Dataflow: "{{ dataflow | default ('none') }}"
    with_sequence: count={{ count }}
  
  - name: POSTGRESQL OVERLAY | creating {{ count }} {{ application }} master VM in {{ specified_resourcegroup.name }}
    azure_rm_virtualmachine:
      resource_group: "{{ specified_resourcegroup.name }}"
      name: "{{ project }}-{{ application }}-{{ item }}-master"
      location: "{{ region }}"
      network_interface_names:
        - "{{ project }}_{{ application }}_{{ ec2_tag_Role | default('master') }}_{{ cluster | default('a') }}_{{ dataflow | default('none') }}_{{ item }}_master_internal"
        - "{{ project }}_{{ application }}_{{ ec2_tag_Role | default('master') }}_{{ cluster | default('a') }}_{{ dataflow | default('none') }}_{{ item }}_master_external"
      vm_size: "{{ type }}"
      managed_disk_type: "{{ root_disk_type | default('Standard_LRS') }}"
      admin_username: "{{ user }}"
      ssh_password_enabled: False
      ssh_public_keys:
        - path: "/home/{{ user }}/.ssh/authorized_keys"
          key_data: "{{ key_contents }}"
      image: "{{ image }}"
      data_disks:
        - lun: 0
          disk_size_gb: "{{ data_volume | default(64) }}"
          managed_disk_type: "{{ data_disk_type | default('Standard_LRS') }}"
      tags:
        Application: "{{ application }}"
        Role: "{{ role | default ('master') }}"
        Tenant: "{{ tenant }}"
        Project: "{{ project }}"
        Cloud: "{{ cloud }}"
        Domain: "{{ domain }}"
        Cluster: "{{ cluster | default ('a') }}"
        Dataflow: "{{ dataflow | default ('none') }}"
    with_sequence: count={{ count }}
    register: create_vm_log
  
  - name: POSTGRESQL OVERLAY | creating {{ count }} {{ application }} replica VM in {{ specified_resourcegroup.name }}
    azure_rm_virtualmachine:
      resource_group: "{{ specified_resourcegroup.name }}"
      name: "{{ project }}-{{ application }}-{{ item }}-replica"
      location: "{{ region }}"
      network_interface_names:
        - "{{ project }}_{{ application }}_{{ ec2_tag_Role | default('replica') }}_{{ cluster | default('a') }}_{{ dataflow | default('none') }}_{{ item }}_replica_internal"
        - "{{ project }}_{{ application }}_{{ ec2_tag_Role | default('replica') }}_{{ cluster | default('a') }}_{{ dataflow | default('none') }}_{{ item }}_replica_external"
      vm_size: "{{ type }}"
      managed_disk_type: "{{ root_disk_type | default('Standard_LRS') }}"
      admin_username: "{{ user }}"
      ssh_password_enabled: False
      ssh_public_keys:
        - path: "/home/{{ user }}/.ssh/authorized_keys"
          key_data: "{{ key_contents }}"
      image: "{{ image }}"
      data_disks:
        - lun: 0
          disk_size_gb: "{{ data_volume | default(64) }}"
          managed_disk_type: "{{ data_disk_type | default('Standard_LRS') }}"
      tags:
        Application: "{{ application }}"
        Role: "{{ role | default ('replica') }}"
        Tenant: "{{ tenant }}"
        Project: "{{ project }}"
        Cloud: "{{ cloud }}"
        Domain: "{{ domain }}"
        Cluster: "{{ cluster | default ('a') }}"
        Dataflow: "{{ dataflow | default ('none') }}"
    with_sequence: count={{ count }}
    register: create_vm_log
        
  when: replica
