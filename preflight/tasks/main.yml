# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# OS tasks that occur post-boot and pre-appplication installation
---

# in a dual interface system, eth1 is always public internal
- name: setting internal private and public interfaces
  set_fact:
    public_internal_interface: "{{ (internal_subnet is defined) | ternary('eth1','eth0') }}"

- block:
  - name: adding ifcfg-{{ public_internal_interface }} script
    become: true
    command: /usr/bin/cp /etc/sysconfig/network-scripts/ifcfg-eth0 "/etc/sysconfig/network-scripts/ifcfg-{{ public_internal_interface }}" creates="/etc/sysconfig/network-scripts/ifcfg-{{ public_internal_interface }}" 

  - name: configuring ifcfg-{{ public_internal_interface }} interface
    become: true
    lineinfile: name="/etc/sysconfig/network-scripts/ifcfg-{{ public_internal_interface }}" regexp='^DEVICE=' line='DEVICE="{{ public_internal_interface }}"'

  - name: configuring no default route on eth0 for {{ application }}
    become: true
    lineinfile: name="/etc/sysconfig/network-scripts/ifcfg-eth0" regexp='^DEFROUTE=' line='DEFROUTE="no"'
  
  - name: restart networking
    become: true
    systemd: "name=network state=restarted"    
  when:
    - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
    - public_internal_interface == 'eth1'

# if AWS, set /dev/xvdb, else assume OSP and /dev/vdb
# this would need to be separated out into multiple set_fact when clauses for additional clouds
- set_fact:
    block_device: "{{ (cloud == 'aws') | ternary('/dev/xvdb', '/dev/vdb') }}"

- block:
  # the ansible filesystem module was succeeding without errors, but the resulting filesystem was unmountable
  - name: making filesystem on {{ block_device }}
    command: /usr/sbin/mkfs -t ext4 {{ block_device }}

  - name: mount data volumes
    mount:
      name: "{{ mountpoint }}"
      src: "{{ block_device }}"
      fstype: ext4
      state: mounted
  become: true
  
- name: ensure sshd_config is writable
  command: /bin/chattr -i /etc/ssh/sshd_config
  become: true
  
- name: ensuring sshd listens on provisioning network
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^#ListenAddress 0.0.0.0"
    backrefs: yes
    line: "ListenAddress {{ hostvars[inventory_hostname].ansible_default_ipv4.address }}"
  become: true

- name: restart sshd
  service:
     name: sshd
     state: restarted
  become: true

- name: generating UUID
  shell: /usr/bin/uuidgen | /usr/bin/tr -d \-
  register: uuid
  become: true

# the lineinfile plays aren't intended to be idempotent
- block:
  - name: setting hostname actively so rebooting is unnecessary
    command: /usr/bin/hostnamectl set-hostname {{ application }}-{{ uuid.stdout }}

  - name: setting pretty hostname actively so rebooting is unnecessary
    command: /usr/bin/hostnamectl --pretty set-hostname "{{ tenant }} {{ application }}"  

  - name: setting hostname in /etc/hostname
    replace:
      path: /etc/hostname
      regexp: "{{ hostvars[inventory_hostname].ansible_hostname }}.ec2.internal"
      replace: "{{ application }}-{{ uuid.stdout }}.localdomain"

  - name: setting {{ application }}-{{ uuid.stdout }}.localdomain in /etc/sysconfig/network
    lineinfile:
      dest: /etc/sysconfig/network
      state: present
      insertafter: EOF
      line: "HOSTNAME={{ application }}-{{ uuid.stdout }}.localdomain"

  - name: setting {{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }} to {{ application }}-{{ uuid.stdout }}.localdomain in /etc/hosts
    lineinfile:
      dest: /etc/hosts
      insertafter: EOF
      # regexp: "^127.0.0.1  localhost localhost.localdomain localhost4 localhost4.localdomain4"
      # backrefs: yes
      # line: "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 {{ hostvars[inventory_hostname].ansible_hostname }}"
      line: "{{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }}    {{ application }}-{{ uuid.stdout }}.localdomain {{ application }}-{{ uuid.stdout }} {{ application }}"

  - name: ensuring hostname changes persist after reboot
    lineinfile:
      dest: /etc/cloud/cloud.cfg
      state: present
      insertafter: EOF
      line: 'preserve_hostname: true'
    when:
      - cloud == 'aws'
  become: true
  when:
    - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

# community CentOS AMI ships with postfix enabled so we need to disable it
- name: stopping postfix
  service:
    name: postfix
    state: stopped
  become: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'  
  
# annnnd remove it
- name: removing postfix
  package:
    name: postfix
    state: absent
  become: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
