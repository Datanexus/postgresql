# (c) Copyright 2016 DataNexus Inc.  All Rights Reserved.
#
#
---    
# facts configuration.
- import_tasks: facts.yml
- import_tasks: interface-facts.yml

- name: installing postgresql and epel repos
  become: true
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - 'https://download.postgresql.org/pub/repos/yum/{{ postgresql_major_version }}.{{ postgresql_minor_version }}/redhat/rhel-7-x86_64/pgdg-{{ ansible_distribution|lower }}{{ postgresql_major_version }}{{ postgresql_minor_version }}-{{ postgresql_major_version }}.{{ postgresql_minor_version }}-3.noarch.rpm'
    - epel-release-7-9

- name: installing postgresql packages
  become: true
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "python-psycopg2-{{ python_postgres_adapter_version }}.el7"
    - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-{{ postgresql_version }}{{ postgresql_rpm_info }}"
    - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-server-{{ postgresql_version }}{{ postgresql_rpm_info }}"
    - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-contrib-{{ postgresql_version }}{{ postgresql_rpm_info }}"
    - "postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-libs-{{ postgresql_version }}{{ postgresql_rpm_info }}"

- block:
  - name: setting PostgreSQL environment variables
    template:
      src: postgres.sh.j2
      dest: /var/lib/pgsql/.pgsql_profile
      mode: 0644
    become: yes

  - name: applying postgresql customizations
    blockinfile:
      name: "/etc/systemd/system/postgresql-{{ postgresql_major_version }}.{{ postgresql_minor_version }}.service"
      mode: 0644
      create: yes
      block: |
        .include /lib/systemd/system/postgresql-{{ postgresql_major_version }}.{{ postgresql_minor_version }}.service
        [Service]
        Environment=PGDATA={{ postgresql_data_dir }}

  - name: checking if PostgreSQL database is initialized
    stat:
      path: "{{ postgresql_data_dir }}/PG_VERSION"
    register: pgdata_dir_version

  - name: initializing {{ postgresql_data_dir }}
    command: "{{ postgresql_bin_path }}/postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-setup initdb"
    when: not pgdata_dir_version.stat.exists

  - name: listening on {{ postgresql_interface_ipv4 }}
    lineinfile:
      dest: "{{ postgresql_config_path }}/postgresql.conf"
      regexp: "^#?listen_addresses"
      backrefs: yes
      line: "listen_addresses = '{{ item }}'\t# what IP address(es) to listen on;"
    with_items: "{{ postgresql_interface_ipv4 }}"
    notify: restart postgresql        
 
  - name: configuring global settings.
    lineinfile:
      dest: "{{ postgresql_config_path }}/postgresql.conf"
      regexp: "^#?{{ item.option }}.+$"
      line: "{{ item.option }} = '{{ item.value }}'"
      state: "{{ item.state | default('present') }}"
    with_items: "{{ postgresql_global_config_options }}"
    notify: restart postgresql
  
  - name: ensuring PostgreSQL unix socket dirs exist
    file:
      path: "{{ item }}"
      state: directory
      owner: "{{ postgresql_user }}"
      group: "{{ postgresql_group }}"
      mode: 02775
    with_items: "{{ postgresql_unix_socket_directories }}"

  - name: updating SE Linux enforcing mode
    sefcontext:
      target: "{{ postgresql_data_dir }}(/.*)?"
      setype: postgresql_db_t
      state: present
      reload: true
    when: ansible_selinux.status == "enabled"
      
  # sefcontent does not restore the context, so we need another step       
  - name: restoring SE Linux security context
    command: /sbin/restorecon -R {{ postgresql_data_dir }}
    when: ansible_selinux.status == "enabled"
  
  - name: ensuring postgresql is started and enabled on boot
    systemd: "name={{ postgresql_daemon }} state=started enabled=True"
  become: true